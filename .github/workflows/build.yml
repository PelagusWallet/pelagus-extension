name: Build

on:
  workflow_call:
    inputs:
      update_version_command:
        required: false
        type: string
        default: npm version patch
      update_version:
        required: true
        type: boolean
        default: true
      branch:
        required: false
        type: string
        default: ${{ github.ref }}

    secrets:
      GH_PAT:
        description: 'needed for github login'
        required: true
      GPG_PRIVATE_KEY2:
        description: 'needed for gpg key'
        required: true
      GPG_KEY_ID:
        description: 'needed for gpg key'
        required: true
      ALCHEMY_API_KEY:
        description: 'needed for alchemy'
        required: true
      BLOCKNATIVE_API_KEY:
        description: 'needed for blocknative'
        required: true
      UNS_API_KEY:
        description: 'needed for uns'
        required: true
      SIMPLE_HASH_API_KEY:
        description: 'needed for simple hash'
        required: true
      ZEROX_API_KEY:
        description: 'needed for zerox'
        required: true
      POAP_API_KEY:
        description: 'needed for poap'
        required: true
      DAYLIGHT_API_KEY:
        description: 'needed for daylight'
        required: true

jobs:
  tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
          ssh-key: ${{ secrets.GH_PAT }}

      - name: Import GPG Key
        if: ${{ inputs.update_version }}
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --import
          git config --global user.signingkey $GPG_KEY_ID
          git config --global commit.gpgsign true
          # Configure Git with CI account details
          git config --global user.name "ci-dominantstrategies"
          git config --global user.email "ci@dominantstrategies.io"
          
          # Optionally, check that the GPG key is correctly configured for signing
          gpg --list-keys "ci@dominantstrategies.io"

      - name: Install yq
        run: sudo snap install yq

      - name: get Version
        run: |
          VERSION_VALUE=$(sudo yq eval '.version' package.json | head -n 1)
          echo "VERSION=$VERSION_VALUE"
          echo "VERSION=$VERSION_VALUE" >> $GITHUB_ENV

      - name: git tag
        if: ${{ inputs.update_version }}
        run: git tag ${{ env.VERSION }} && HUSKY=0 git push origin tag ${{ env.VERSION }}

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.GH_PAT }}

      - name: Import GPG Key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY2 }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --import
          git config --global user.signingkey $GPG_KEY_ID
          git config --global commit.gpgsign true

          # Configure Git with CI account details
          git config --global user.name "ci-dominantstrategies"
          git config --global user.email "ci@dominantstrategies.io"

          # Optionally, check that the GPG key is correctly configured for signing
          gpg --list-keys "ci@dominantstrategies.io"

      - name: Read .nvmrc
        run: echo "NVMRC=$(cat ./.nvmrc)" >> $GITHUB_OUTPUT
        id: nvm
      - name: Use Node + Yarn
        uses: actions/setup-node@v3
        with:
          node-version: "${{ steps.nvm.outputs.NVMRC }}"
          cache: "yarn"
      - run: yarn install --frozen-lockfile
      - name: Detect env block
        id: env-block
        if: ${{ !inputs.update_version }}
        uses: actions/github-script@v6
        with:
          script: |
            const detectEnvBlock = require("./.github/workflows/builds/detect-env-block.js")
            return await detectEnvBlock({ github, context })
      - name: Dev build
        if: ${{ !inputs.update_version }}
        run: |
          echo -e ${{ steps.env-block.outputs.result }} > .env
          echo 'USE_ANALYTICS_SOURCE="BETA"' >> .env
          yarn build
        env:
          ALCHEMY_KEY: ${{ secrets.DEV_ALCHEMY_API_KEY || 'oV1Rtjh61hGa97X2MTqMY9kEUcpxP-6K' }}
          BLOCKNATIVE_API_KEY: ${{ secrets.DEV_BLOCKNATIVE_API_KEY || 'f60816ff-da02-463f-87a6-67a09c6d53fa' }}
          DAYLIGHT_API_KEY: ${{ secrets.DAYLIGHT_API_KEY }}
          COMMIT_SHA: ${{ github.sha }}
      - name: Production build
        if: ${{ inputs.update_version }}
        run: |
          echo 'USE_ANALYTICS_SOURCE="PROD"' >> .env
          yarn build
        env:
          ALCHEMY_KEY: ${{ secrets.ALCHEMY_API_KEY }}
          BLOCKNATIVE_API_KEY: ${{ secrets.BLOCKNATIVE_API_KEY }}
          UNS_API_KEY: ${{ secrets.UNS_API_KEY }}
          SIMPLE_HASH_API_KEY: ${{ secrets.SIMPLE_HASH_API_KEY }}
          ZEROX_API_KEY: ${{ secrets.ZEROX_API_KEY }}
          COMMIT_SHA: ${{ github.sha }}
          POAP_API_KEY: ${{ secrets.POAP_API_KEY }}
          DAYLIGHT_API_KEY: ${{ secrets.DAYLIGHT_API_KEY }}
      - name: Upload build asset
        if: ${{ inputs.update_version }}
        uses: actions/upload-artifact@v3
        with:
          name: extension-builds-${{ github.event.number || github.event.head_commit.id }}
          path: dist/*.zip
      - name: Create Release and Upload Artifacts
        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5 # v1
        if: ${{ inputs.update_version }}
        with:
          files: dist/*.zip
          draft: true
          generate_release_notes: true
          prerelease: false
      - name: Install jq
        if: ${{ inputs.update_version }}
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: install semver globally
        if: ${{ inputs.update_version }}
        run: npm install -g semver
      - name: Update Version
        if: ${{ inputs.update_version }}
        run: ${{ inputs.update_version_command }}
      - name: get Version
        if: ${{ inputs.update_version }}
        run: |
          VERSION_VALUE=$(sudo yq eval '.version' package.json | head -n 1)
          echo "VERSION=$VERSION_VALUE"
          echo "VERSION=$VERSION_VALUE" >> $GITHUB_ENV
      - name: Sync Manifest
        if: ${{ inputs.update_version }}
        run: |
          yq eval -i ".version = \"${{ env.VERSION }}\"" manifest/manifest.json
      - uses: stefanzweifel/git-auto-commit-action@v4
        if: ${{ inputs.update_version }}
        with:
          branch: ${{ inputs.branch }}
          commit_user_name: ci-dominantstrategies
          commit_user_email: ci@dominantstrategies.io
        env:
          HUSKY: 0



  ## test:
  ##   runs-on: ubuntu-latest
  ##   steps:
  ##     - uses: actions/checkout@v3
  ##     - name: Read .nvmrc
  ##       run: echo "NVMRC=$(cat ./.nvmrc)" >> $GITHUB_OUTPUT
  ##       id: nvm
  ##     - name: Use Node + Yarn
  ##       uses: actions/setup-node@v3
  ##       with:
  ##         node-version: "${{ steps.nvm.outputs.NVMRC }}"
  ##         cache: "yarn"
  ##     - run: yarn install --frozen-lockfile
  ##     - run: yarn test
  ## lint:
  ##   runs-on: ubuntu-latest
  ##   steps:
  ##     - uses: actions/checkout@v3
  ##     - name: Read .nvmrc
  ##       run: echo "NVMRC=$(cat ./.nvmrc)" >> $GITHUB_OUTPUT
  ##       id: nvm
  ##     - name: Use Node + Yarn
  ##       uses: actions/setup-node@v3
  ##       with:
  ##         node-version: "${{ steps.nvm.outputs.NVMRC }}"
  ##         cache: "yarn"
  ##     - run: yarn install --frozen-lockfile
  ##     - run: yarn lint
  detect-if-flag-changed:
    runs-on: ubuntu-latest
    outputs:
      path-filter: ${{ steps.filter.outputs.path-filter }}
    steps:
      - uses: actions/checkout@v3
        if: github.event_name == 'pull_request'
      - uses: dorny/paths-filter@v2
        if: github.event_name == 'pull_request'
        id: filter
        with:
          filters: |
            path-filter:
              - '.env.defaults'
  ## e2e-tests:
  ##   if: |
  ##     github.ref == 'refs/heads/main'
  ##       || contains(github.head_ref, 'e2e')
  ##       || needs.detect-if-flag-changed.outputs.path-filter == 'true'
  ##   needs: [build, detect-if-flag-changed]
  ##   timeout-minutes: 60
  ##   runs-on: ubuntu-latest
  ##   steps:
  ##     - uses: actions/checkout@v3
  ##     - name: Read .nvmrc
  ##       run: echo "NVMRC=$(cat ./.nvmrc)" >> $GITHUB_OUTPUT
  ##       id: nvm
  ##     - name: Use Node + Yarn
  ##       uses: actions/setup-node@v3
  ##       with:
  ##         node-version: "${{ steps.nvm.outputs.NVMRC }}"
  ##         cache: "yarn"
  ##     - run: yarn install --frozen-lockfile
  ##     - name: Install Playwright Browsers
  ##       run: npx playwright install --with-deps chromium
  ##     - uses: actions/download-artifact@v3
  ##       with:
  ##         name: extension-builds-${{ github.event.number || github.event.head_commit.id }}
  ##     - name: Extract extension
  ##       run: unzip -o chrome.zip -d dist/chrome
  ##     - name: Run Playwright tests
  ##       run: xvfb-run npx playwright test
  ##       #env:
  ##       # DEBUG: pw:api*
  ##     - uses: actions/upload-artifact@v3
  ##       if: failure()
  ##       with:
  ##         name: debug-output
  ##         path: |
  ##           test-results/
  ##           #videos/
  ##         retention-days: 30
